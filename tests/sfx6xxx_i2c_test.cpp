/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 0.40.1
 * Product:       sfx6xxx
 * Model-Version: 2.3.1
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include "sfx6xxx_i2c.h"
#include <inttypes.h>
#include <stdio.h>

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

TEST_GROUP (SFX6XXX_Tests) {
    void setup() {
        sfx6xxx_init(0x24);
    }
};

TEST (SFX6XXX_Tests, test_read_product_identifier1) {
    int16_t local_error = 0;
    uint32_t product_identifier = 0;
    uint64_t serial_number = 0;
    local_error =
        sfx6xxx_read_product_identifier(&product_identifier, &serial_number);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_product_identifier");
    printf("product_identifier: %u ", product_identifier);
    printf("serial_number: %" PRIx64 "\n", serial_number);
}

TEST (SFX6XXX_Tests, test_start_o2_continuous_measurement1) {
    int16_t local_error = 0;
    int16_t flow = 0;
    int16_t reserved = 0;
    sfx6xxx_status_word_t status_word = {.value = 0u};
    int16_t arg_0 = 0;
    local_error = sfx6xxx_start_o2_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_o2_continuous_measurement");
    local_error = sfx6xxx_read_measurement_data(&flow, &reserved, &status_word);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_data");
    printf("flow: %i ", flow);
    printf("reserved: %i ", reserved);
    printf("status_word: %02x\n", status_word.value);
    local_error = sfx6xxx_read_flow_raw(&arg_0);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_flow_raw");
    printf("arg_0: %i\n", arg_0);
    local_error = sfx6xxx_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}

TEST (SFX6XXX_Tests, test_start_air_continuous_measurement1) {
    int16_t local_error = 0;
    int16_t flow = 0;
    int16_t reserved = 0;
    sfx6xxx_status_word_t status_word = {.value = 0u};
    int16_t arg_0 = 0;
    local_error = sfx6xxx_start_air_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_air_continuous_measurement");
    local_error = sfx6xxx_read_measurement_data(&flow, &reserved, &status_word);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_data");
    printf("flow: %i ", flow);
    printf("reserved: %i ", reserved);
    printf("status_word: %02x\n", status_word.value);
    local_error = sfx6xxx_read_flow_raw(&arg_0);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_flow_raw");
    printf("arg_0: %i\n", arg_0);
    local_error = sfx6xxx_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}

TEST (SFX6XXX_Tests, test_start_co2_continuous_measurement1) {
    int16_t local_error = 0;
    int16_t flow = 0;
    int16_t reserved = 0;
    sfx6xxx_status_word_t status_word = {.value = 0u};
    int16_t arg_0 = 0;
    local_error = sfx6xxx_start_co2_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_co2_continuous_measurement");
    local_error = sfx6xxx_read_measurement_data(&flow, &reserved, &status_word);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_data");
    printf("flow: %i ", flow);
    printf("reserved: %i ", reserved);
    printf("status_word: %02x\n", status_word.value);
    local_error = sfx6xxx_read_flow_raw(&arg_0);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_flow_raw");
    printf("arg_0: %i\n", arg_0);
    local_error = sfx6xxx_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}

TEST (SFX6XXX_Tests, test_start_n2o_continuous_measurement1) {
    int16_t local_error = 0;
    int16_t flow = 0;
    int16_t reserved = 0;
    sfx6xxx_status_word_t status_word = {.value = 0u};
    int16_t arg_0 = 0;
    local_error = sfx6xxx_start_n2o_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_n2o_continuous_measurement");
    local_error = sfx6xxx_read_measurement_data(&flow, &reserved, &status_word);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_data");
    printf("flow: %i ", flow);
    printf("reserved: %i ", reserved);
    printf("status_word: %02x\n", status_word.value);
    local_error = sfx6xxx_read_flow_raw(&arg_0);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_flow_raw");
    printf("arg_0: %i\n", arg_0);
    local_error = sfx6xxx_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}

TEST (SFX6XXX_Tests, test_start_ar_continuous_measurement1) {
    int16_t local_error = 0;
    int16_t flow = 0;
    int16_t reserved = 0;
    sfx6xxx_status_word_t status_word = {.value = 0u};
    int16_t arg_0 = 0;
    local_error = sfx6xxx_start_ar_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_ar_continuous_measurement");
    local_error = sfx6xxx_read_measurement_data(&flow, &reserved, &status_word);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_data");
    printf("flow: %i ", flow);
    printf("reserved: %i ", reserved);
    printf("status_word: %02x\n", status_word.value);
    local_error = sfx6xxx_read_flow_raw(&arg_0);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_flow_raw");
    printf("arg_0: %i\n", arg_0);
    local_error = sfx6xxx_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}
